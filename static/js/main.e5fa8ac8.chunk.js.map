{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","savedToDo","onSubmit","oldToDos","text","id","Date","now","localStorage","setItem","JSON","stringify","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.e5fa8ac8.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n\n\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n    \n    localStorage.setItem('key', JSON.stringify(savedToDo));\n  };\n  const savedToDo = useRecoilValue(toDoState);\n  \n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;","import React from \"react\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const savedToDo = useRecoilValue(toDoState);\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n    localStorage.setItem('key', JSON.stringify(savedToDo));\n  };\n\n  const deleteToDo = () => {  \n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n    localStorage.setItem('key', JSON.stringify(savedToDo));\n\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n      <button onClick={deleteToDo}>x</button>\n    </li>\n  );\n}\n\nexport default ToDo;","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector, toDoState } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  \n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};"],"sourceRoot":""}